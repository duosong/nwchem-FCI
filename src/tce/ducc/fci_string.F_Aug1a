      subroutine fci_string(rtdb,
     &    d_v2,k_v2_offset,nos,nvs,noas,nobs,nvas,nvbs,
     &    nstot,
     &    h,v,xtol)
c
c  Only for RHF
c
c all varaible below have to be defined in the tce_energy.f
c
c please do not freeze the occupied orbitals for now
c
c nstot - total number of spinorbitals nstot=nos+nvs
c nos   - number of occupied spinorbitals
c nvs   - number of virtual spinorbitals
c noas  - number of occupied alpha spinorbitals
c nobs  - number of occupied beta spinorbitals
c nvas  - number of virtual  alhoa spinorbitals
c nvbs  - number of virtual beta spinorbitals
c
c spinorbital convention
c
c | noas | nobs | nvas | nvbs |
c
c ene_orb contains orbital energies
c
c COMMENTS: 
c iext1 & iext2 - redundant
c
c
c
      implicit none
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "util.fh"
#include "stdio.fh"
#include "rtdb.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_main.fh"
      integer d_v2    ! GA handle for v2
      integer k_v2_offset
      integer nos,nvs ! # of occupied/virtual spinorbitals
      integer noas,nobs,nvas,nvbs ! # of occupied/virtual alphas betas
      integer nstot
cc      double precision ene_orb(nos+nvs)  ! a copy of dbl_mb(k_sorted)
      integer size
      integer rtdb
      integer l_aux1,k_aux1 ! for local memory allocator: loc. mem. buffer 1
      integer i,j,k,l,m,n         ! auxiliary indices
      integer ia,ib,ic,id,ie      !auxiliary indices
      integer iaux
c      integer nact              !number of active virtual orbitals
c h created here from "orbital" matrix horb
      double precision h(nos+nvs,nos+nvs)
c horb valid only for RHF case
      double precision horb((nos+nvs)/2,(nos+nvs)/2)
      double precision v(nos+nvs,nos+nvs,nos+nvs,nos+nvs)
c FCI dimension
      integer qnumber
      integer dim_fci
      integer alpha_str
      integer l_str,k_str
      logical sym_test
c
c
c
      double precision xxx,yyy,zzz
c
      logical nodezero
      logical oprint_qa
c
c
      nodezero = (ga_nodeid().eq.0)
      oprint_qa=util_print('ducc_qa', print_high)
c
c
c
      xgap=0.0d0
c
      do i=1,(nos+nvs)/2
      do j=1,(nos+nvs)/2
        horb(i,j)=0.0d0
      enddo
      enddo
c
      do i=1,nos+nvs
      do j=1,nos+nvs
        h(i,j)=0.0d0
      enddo
      enddo
c
      call kinetic_hcore_1(rtdb,horb,h,nos,nvs,noas,nobs,nvas,nvbs)
c
c     
c forming v matrix
c
      do i=1,nos+nvs
      do j=1,nos+nvs
      do k=1,nos+nvs
      do l=1,nos+nvs
        v(i,j,k,l)=0.0d0 
      enddo
      enddo
      enddo
      enddo
c
      call mapping_v2_m(rtdb,d_v2,k_v2_offset,v,nos,nvs)
c
c
c
c  you have everything here for FCI: v & h are ready
c
c  ATTENTION:   Works only for the RHF case
c
c
c
c  Matrix dimensions - simplest case Ms symmetry binom(n,k)*binom(n,k) 
c  n=noas+nvas / k=noas
c
c
        dim_fci = 0
        sym_test = .true.
c
      if (.not.MA_PUSH_GET(mt_int,(noas+nvas),'a_string',l_str,
     1 k_str)) CALL ERRQUIT('a_string',0,MA_ERR)
c
        qnumber = 0
        do m = 0, noas+nvas
         qnumber = qnumber + 2**m
        enddo 
c
        do i=1,qnumber   !main loop 
c
         do m=1,noas+nvas
          int_mb(k_str+m-1) = 0
         enddo
c         
         k=i
c
         do j = noas+nvas, 1, -1 !bin. dec.
            l=k/(2**j)
            if(l.eq.0) then
             int_mb(k_str+j-1) = 0
            else
             int_mb(k_str+j-1) = 1
             k=k-2**j
            endif
         enddo !bin. dec.
c numer of alpha particle check
         m=0
         do j=1,noas+nvas
c additional symmetry checks possible here
          m = m+int_mb(k_str+j-1)
         enddo
         if(m.eq.noas) dim_fci = dim_fci + 1
c
        enddo !main loop
c
        alpha_str = dim_fic
        dim_fci = dim_fci*dim_fci
c
      if (.not.MA_POP_STACK(l_str))
     1   call errquit("l_str",0,MA_ERR)
c
      if(nodezero) then
        write(6,*)'alpha strings: ',alpha_str
        write(6,*)'dim_fci: ',dim_fci
        call util_flush
      endif
c
      if (.not.MA_PUSH_GET(mt_dbl,dim_fci*dim_fci,'fcim',
     1      l_matrix,k_matrix))
     1      call errquit('rrst2',1,MA_ERR)
c
c 
c initialization
c
       do i=1,dim_fci*dim_fci
         dbl_mb(k_matrix+i-1) = 0.0d0
       enddo
c
c
c
c *** debug ***
       if(nodezero) then
        write(6,*)'before fci_matrix'
        call util_flush(6)
       endif
c *************
c
       call fci_matrix(rtdb,
     &      dim_fci,alpha_str,dbl_mb(k_matrix),h,v,
     &      nos,nvs,noas,nobs,nvas,nvbs,nstot)
c
c
c *** debug ***
       if(nodezero) then
        write(6,*)'after fci_matrix'
        call util_flush(6)
       endif
c *************
c
c
      if(.not.MA_POP_STACK(l_matrix))
     &      call errquit('rrst3',4,MA_ERR)
c
c
c
c
c
      return 
      end
c
c
c
c
c ------------- linearized approach RRST(1)
c
c
c
c
c
       subroutine fci_matrix(rtdb,
     &      dim_fci,alpha_str,matrix,h,v,
     &      nos,nvs,noas,nobs,nvas,nvbs,nstot)
c
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "util.fh"
#include "stdio.fh"
#include "rtdb.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_main.fh"
c auxiliary integers
        integer i,j,k,l,m,n,iaux
        integer p,q,r,s,t,u,w,x,y,z
        integer ipl1,ipl2
c
        integer rtdb
        integer nstot
        integer dim_fci
        integer alpha_str
        double precision h(nstot,nstot)
        double precision v(nstot,nstot,nstot,nstot)
        double precision matrix(dim_fci,dim_fci)
        double precision xxx,yyy,zzz
c
        integer nos,nvs,noas,nobs,nvas,nvbs
c
        integer qnumber
        integer k_str,l_str
        integer half_str(alpha_str,noas+nvas)
        integer strings(dim_fci,nstot)
        integer string1(nstot)
        integer string2(nstot)
        integer string_diff(nstot)
        integer ind_set(2*noas)
        integer dim_fci_test
c
        logical nodezero
        logical sym_test
c
c
        sym_test=.true.
        nodezero = (ga_nodeid().eq.0)
c
c
        if(nodezero) then 
         write(6,*)'nos: ',nos
         write(6,*)'nvs: ',nvs
         write(6,*)'noas: ',noas
         write(6,*)'nobs: ',nobs
         write(6,*)'nvas: ',nvas
         write(6,*)'nvbs" ',nvbs
         write(6,*)'nstot = ',nstot
         write(6,*)'dim_fci = ',dim_fci
         write(6,*)'alpha_str = ',alpha_str
         call util_flush(6)
        endif
c
        do i=1,noas+nvas
        do j=1,alpha_str
         half_str(j,i) = 0
        enddo
        enddo
c
        do i=1,nstot
        do j=1,dim_fci
         strings(j,i) = 0
        enddo
        enddo
c
        do i=1,dim_fci
        do j=1,dim_fci
         matrix(j,i)=0.0d0
        enddo
        enddo
c
c
c
        sym_test = .true.
        dim_fci_test = 0
c
      if (.not.MA_PUSH_GET(mt_int,(noas+nvas),'a_string',l_str,
     1 k_str)) CALL ERRQUIT('a_string',0,MA_ERR)
c ----- half_str starts here --------------------
        qnumber = 0
        do m = 0, noas+nvas
         qnumber = qnumber + 2**m
        enddo
c
        do i=1,qnumber   !main loop 
c
         do m=1,noas+nvas
          int_mb(k_str+m-1) = 0
         enddo
c         
         k=i
c
         do j = noas+nvas, 1, -1 !bin. dec.
            l=k/(2**j)
            if(l.eq.0) then
             int_mb(k_str+j-1) = 0
            else
             int_mb(k_str+j-1) = 1
             k=k-2**j
            endif
         enddo !bin. dec.
c numer of alpha particle check
         m=0
         do j=1,noas+nvas
c additional symmetry checks possible here
          m = m+int_mb(k_str+j-1)
         enddo
         if(m.eq.noas) then
c additional symmetry checks possible here
           dim_fci_test = dim_fci_test + 1
           do n=1,noas+nvas
            half_str(dim_fci_test,n) = 
     1        int_mb(k_str+n-1)    
           enddo
         endif
c
        enddo !main loop
c
      if (.not.MA_POP_STACK(l_str))
     1   call errquit("l_str",0,MA_ERR)
c
      if(dim_fci_test.ne.alpha_str) 
     1   call errquit("dim_fci_test",0,MA_ERR)
c  ------- done with half_str -----------------------
c
c
c  ------- total number of strings (only valid fro RHF ref.)
c  
      k=0
      do i=1,alpha_str
      do j=1,alpha_str
       k=k+1
       do l=1,noas
        strings(k,l)=half_str(i,l)
       enddo
       do l=1,nvas
       strings(k,l+nos)=half_str(i,l+noas)
       enddo
       do l=1,noas
        strings(k,l+noas)=half_str(j,l)
       enddo
       do l=1,nvas
        strings(k,l+nos+nvas)=half_str(j,l+noas)
       enddo
      enddo
      enddo
c
c ------- done with strings list --------------------
c
c upper half only
c
      do i=1,dim_fci  !main loop1
      do j=i,dim_fci  !main loop2
c
       idiff=0
       do k=1,nstot
        string1(k)=strings(i,k)
        string2(k)=strings(j,k)
        string_diff(k)=string1(k)-string2(k)
        idiff=idiff+abs(string_diff(k))
       enddo
c
       idiff=idiff/2
c
       if(idiff.gt.2) then
        matrix(i,j)=0.0d0
        matrix(j,i)=0.0d0
       endif
c
       if(idiff.eq.2) then

       endif
c
       if(idiff.eq.1) then

       endif 
c
       if(idiff.eq.0) then
         k=1
         do l=1,nstot
          if(string1(l).eq.1) then
           ind_set(k)=l
           k=k+1
          endif
         enddo
         do k=1,2*noas
          p=ind_set(k)
          matrix(i,i)=matrix(i,i)+h(p,p)
         do l=1,2*noas
          q=ind_set(l) 
          matrix(i,i)=matrix(i,i)+v(p,q,p,q)
         enddo
         enddo
       endif

c
      enddo           !main loop2
      enddo           !main loop1
c
c
c
c
c
c
c







c
        return 
        end
