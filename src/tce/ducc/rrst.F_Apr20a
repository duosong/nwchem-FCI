      subroutine rrst(rtdb,d_t1,k_t1_offset,d_t2,k_t2_offset,
     &    d_v2,k_v2_offset,ene_orb,nos,nvs,noas,nobs,nvas,nvbs,nactv,
     D        transform,actindex1,printindex1,
     D        actindex2,printindex2,
     D        h,horb,v,
     D        t1,t2,
     D        ht,vt)
#ifndef OPTIMIZE_DUCC
CDIR$ OPTIMIZE: 2
#endif
c
c  Only for RHF
c
c all varaible below have to be defined in the tce_energy.f
c the nact should be defined in the input set tce:nactv
c
c All occupied orbitals are treated as active
c nactv defines the number of active virtual orbitals
c please do not freeze the occupied orbitals for now
c
c nactv - number of active virtual orbitals
c nos   - number of occupied spinorbitals
c nvs   - number of virtual spinorbitals
c noas  - number of occupied alpha spinorbitals
c nobs  - number of occupied beta spinorbitals
c nvas  - number of virtual  alhoa spinorbitals
c nvbs  - number of virtual beta spinorbitals
c
c spinorbital convention
c
c | noas | nobs | nvas | nvbs |
c
c ene_orb contains orbital energies
c
      implicit none
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "util.fh"
#include "stdio.fh"
#include "rtdb.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_main.fh"
      integer d_t1    ! GA handle for t1
      integer k_t1_offset
      integer d_t2    ! GA handle for t2
      integer k_t2_offset
      integer d_v2    ! GA handle for v2
      integer k_v2_offset
      integer nos,nvs ! # of occupied/virtual spinorbitals
      integer noas,nobs,nvas,nvbs ! # of occupied/virtual alphas betas
      integer nactv
      double precision ene_orb(nos+nvs)  ! a copy of dbl_mb(k_sorted)
      integer size
      integer rtdb
      integer l_aux1,k_aux1 ! for local memory allocator: loc. mem. buffer 1
      integer i,j,k,l         ! auxiliary indices
      integer ia,ib,ic,id,ie,if !auxiliary indices
      integer nact              !number of active virtual orbitals
c nicks transform.
      integer g,m,n,p,q,r,s
      DOUBLE PRECISION PTHRESH  !PRINTING THRESHOLD
      INTEGER TRANSFORM(NOS+NVS)  !RETURNS THE CORRESPONDING ORBITAL LABEL FOR A GIVEN SPIN ORBITAL

      DOUBLE PRECISION ZZZ
C INDEXING ARRAY TO DETERMINE IF A SET OF INDICES CORRESPONDS TO AN
c h created here from "orbital" matrix horb
      double precision h(nos+nvs,nos+nvs)
c horb valid only for RHF case
      double precision horb((nos+nvs)/2,(nos+nvs)/2)
      double precision v(nos+nvs,nos+nvs,nos+nvs,nos+nvs)
c RRST 
      double precision v1(nos+nvs,nos+nvs)
      double precision h0(nos+nvs,nos+nvs)
c v2 <===> v(nos+nvs,nos+nvs,nos+nvs,nos+nvs)
      double precision a1_1o(nos+nvs,nos+nvs)
      double precision a2_1o(nos+nvs,nos+nvs,nos+nvs,nos+nvs)
      double precision a1_2o(nos+nvs,nos+nvs)
      double precision a2_2o(nos+nvs,nos+nvs,nos+nvs,nos+nvs)


c a3_2o DECLARE HERE!!!! 






c
c t2 in a nice representation : be careful here (you may want to reindex
c virtuals
      double precision t1(nos,nos+1:nos+nvs)
      double precision t2(nos,nos,nos+1:nos+nvs,nos+1:nos+nvs)
c transformed matrices
ccx      double precision ht(nos+nvs,nos+nvs)
!      double precision FOCKt(nos+nvs,nos+nvs)
ccx      double precision vt(nos+nvs,nos+nvs,nos+nvs,nos+nvs)  
c correlation energies
      double precision eccsd
      double precision xxx
c
      logical nodezero
      logical oprint_qa
c
c
      nodezero = (ga_nodeid().eq.0)
      oprint_qa=util_print('ducc_qa', print_high)
c
c
c
      do i=1,(nos+nvs)/2
      do j=1,(nos+nvs)/2
        horb(i,j)=0.0d0
      enddo
      enddo
c
      do i=1,nos+nvs
      do j=1,nos+nvs
        h(i,j)=0.0d0
      enddo
      enddo
c
      call kinetic_hcore_1(rtdb,horb,h,nos,nvs,noas,nobs,nvas,nvbs)
c
c     
c forming v matrix
c
      do i=1,nos+nvs
      do j=1,nos+nvs
      do k=1,nos+nvs
      do l=1,nos+nvs
        v(i,j,k,l)=0.0d0 
      enddo
      enddo
      enddo
      enddo
      call mapping_v2_m(rtdb,d_v2,k_v2_offset,v,nos,nvs)
c
c
c
c you have everything here for RRST
c









c  second quantized bare Hamiltonian for Qiskit
c
c  GCM GCM GCM GCM GCM 
c
c
      if(nodezero) then 
c FORMAT1 (Qiskit chemist notation: h2(i,j,k,l)=v2(i,k,j,l)
c Now in OpenFermion format                                    
c       write(6,*)" --- second quantized Hamiltonian --- "
c       write(6,*)" Qiskit notation h2(i,j,k,l)=v2(i,k,j,l)"
c       do i=1,nos+nvs
c       do,j=1,nos+nvs
cc        xxx=dabs(h(i,j))
cc        if(xxx.gt.1.0d-10) then
c         write(6,311) h(i,j),i,j
cc        endif
c       enddo
c       enddo
c       do, i=1,nos+nvs
c       do, j=1,nos+nvs
c       do, k=1,nos+nvs
c       do, l=1,nos+nvs
cc        xxx=dabs(v(i,j,k,l))
cc        if(xxx.gt.1.0d-10) then
c          write(6,312) (0.250d0)*v(i,k,j,l),i,j,k,l
cc        endif
c       enddo
c       enddo
c       enddo
c       enddo
c       call util_flush(6)
c 311   format(f13.7,2x,2i4)
c 312   format(f13.7,2x,4i4)
c FORMAT2: OpenFermion format
c end of Qiskit 
c
c
c
      do i=1,nos
      do ia=nos+1,nos+nvs
        t1(i,ia)=0.0d0
      enddo
      enddo
c
      do i=1,nos
        do j=1,nos
          do ia=nos+1,nos+nvs
            do ib=nos+1,nos+nvs
               t2(i,j,ia,ib)=0.0d0
            enddo
          enddo
        enddo
      enddo
c
      call mapping_t1(rtdb,d_t1,k_t1_offset,t1,nos,nvs)
c
c
      call mapping_t2(rtdb,d_t2,k_t2_offset,t2,nos,nvs)
c
c
c check point: calculating CCSD correlation energy 
c 
c      eccsd=0.0d0
c      do i=1,nos
c      do j=1,nos
c      do ia=nos+1,nos+nvs
c      do ib=nos+1,nos+nvs
c        eccsd=eccsd+0.250d0*v(i,j,ia,ib)*t2(i,j,ia,ib)
c        eccsd=eccsd+0.50d0*v(i,j,ia,ib)*t1(i,ia)*t1(j,ib)
c      enddo
c      enddo
c      enddo
c      enddo
c 
      if(nodezero) then 
        write(6,*)'From DUCC CCSD corr. ene.',eccsd
        call util_flush(6)
      endif






      return 
      end

